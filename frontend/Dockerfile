
# STEP 1: BUILD THE IMAGE
# docker build -t docker-reactjs-frontend -f Dockerfile .

# STEP 2: RUN THE IMAGE
# docker run -it --name container-reactjs-frontend --rm -p 5173:5173 docker-reactjs-frontend

# OR

# STEP 2: RUN THE IMAGE
# docker run -d --name container-reactjs-frontend --rm -p 5173:5173 docker-reactjs-frontend

# USE AN OFFICIAL NODE RUNTIME AS THE BASE IMAGE
FROM node:20-alpine as build-stage

# SET THE WORKING DIRECTORY IN THE CONTAINER TO /APP
WORKDIR /app

# COPY PACKAGE.JSON TO THE WORKING DIRECTORY IN THE CONTAINER `/app`
COPY package*.json /app/

# INSTALL ANY NEEDED PACKAGES SPECIFIED IN PACKAGE.JSON
RUN npm install

# COPY THE REST OF YOUR APP'S SOURCE CODE FROM YOUR HOST TO YOUR IMAGE FILE SYSTEM
COPY . /app/

# BUILD THE APP
RUN npm run build

# -----------------
# SECOND STAGE. IMPLEMENTING THE MULTI-STAGE BUILD 
# -----------------

# USE AN OFFICIAL LIGHTWEIGHT NODE.JS AS A RUNTIME STAGE
# FROM node:20-alpine

# SET THE WORKING DIRECTORY IN THE CONTAINER TO /APP
# WORKDIR /app

# INSTALL SERVE TO RUN YOUR APPLICATION
# RUN npm install -g serve

# COPY BUILD FILES FROM BUILDER STAGE
# COPY --from=BUILDER /app/dist /app/dist

# MAKE PORT 5173 AVAILABLE TO THE WORLD OUTSIDE THIS CONTAINER
EXPOSE 5173

# RUN THE APP WHEN THE CONTAINER LAUNCHES
CMD ["npm", "run", "dev"]